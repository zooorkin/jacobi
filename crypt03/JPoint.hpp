//
//  JPoint.hpp
//  crypt03
//
//  Created by Андрей Зорькин on 15.12.17.
//  Copyright © 2017 Андрей Зорькин. All rights reserved.
//

#ifndef JPoint_hpp
#define JPoint_hpp

#include <NTL/ZZ_p.h>
#include <NTL/ZZ_p.h>

#define p_str      "454069018412434321972378083527459607666454479745512801572100703902391945898"
#define module_str "115792089237316195423570985008687907853269984665640564039457584007913129639319"
#define a_str      "87789765485885808793369751294406841171614589925193456909855962166505018127157"
#define x_base     "65987350182584560790308640619586834712105545126269759365406768962453298326056"
#define y_base     "22855189202984962870421402504110399293152235382908105741749987405721320435292"
#define q_str      "28948022309329048855892746252171976963338560298092253442512153408785530358887"

using namespace NTL;

// Значения elliptic curve parameters
struct{
    ZZ_p p;         /*  (p,0) - точка второго порядка в форме Вейерштрасса              */
    ZZ_p a;         /*  параметр a эллиптической кривой в форме Вейерштрасса            */
    ZZ_p e;         /*  параметр e эллиптической кривой в форме квадрики Якоби          */
    ZZ_p d;         /*  параметр d эллиптической кривой в форме квадрики Якоби          */
    ZZ_p x;         /*  первая координата порождающей точки в форме Вейерштрасса        */
    ZZ_p y;         /*  вторая координата порождающей точки в форме Вейерштрасса        */
    ZZ_p q;         /*  порядок циклической подгруппы группы точек эллиптической кривой */
    ZZ_p X_base;    /*  первая координата порождающей точки в форме квадрики Якоби      */
    ZZ_p Y_base;    /*  вторая координата порождающей точки в форме квадрики Якоби      */
    ZZ_p Z_base;    /*  третья координата порождающей точки в форме квадрики Якоби      */
}ECP;

// Инициализация арифметики больших чисел
void initArithmetic();
// Установка значений для кривой
void loadECP();

// Точка эллиптической кривой
class JPoint{
public:
    // Координаты Якоби (X: Y: Z)
    ZZ_p X, Y, Z;
    // Инициализация нейтральным элементом
    JPoint();
    // Инцициализцаия
    JPoint(ZZ_p, ZZ_p, ZZ_p);
    // Прибавление к точке
    JPoint operator+(const JPoint&);
    // Взятие обратного элемента
    JPoint operator-();
    // Вычитание из точки
    JPoint operator-(JPoint&);
    // Сравнение точек на равенство
    bool operator==(const JPoint&);
    // Удвоение точки
    JPoint doubled();
    // Возведение точки в степень
    JPoint pow(const ZZ);
    // Возведение точки в степень, заданную стандартным вводом
    JPoint powByInput();
    // Координаты точки в форме Вейерштрасса
    JPoint inWeierstrass();
    // Печать на стандратный вывод значений коррдинат точки
    JPoint printCoordinates();
    // Проверка принадлежности точки кривой
    JPoint isOnCurve();
    // Проверка равности точки с заданной точкой
    JPoint isEqualTo(const JPoint);
};

// Базовая точка эллиптической кривой
JPoint getBasePoint();

#endif /* JPoint_hpp */
